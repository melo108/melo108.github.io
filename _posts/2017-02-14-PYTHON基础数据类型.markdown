---
layout: post
title:  "PYTHON基础数据类型"
description: 计算机基础知识和python基础数据类型
date:   2017-02-14 14:55:52 +0200
categories: jekyll update
---

# python 基础 #

----------
<br><br>
## 1 计算机相关知识

----------

>**计算机组成结构**

    1. CPU中央处理器------用于计算
    2. 内存-----用于存放数据（4g,8g,16g）马上要使用的数据
    3. 硬盘-----存放所有的数据
    4. 输入输出设备------获取数据，返回数据
    
>**操作系统**

	实质是软件---用于控制计算机硬件之间的数据交互 (windows;linux)

>**应用程序**

	用户通过操作系统 获得数据的软件 (QQ,excel,浏览器)

<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1513185190785&di=2a28b0f6301b82c5d518cc0722ad81f7&imgtype=0&src=http%3A%2F%2Fpic.baike.soso.com%2Fp%2F20131221%2F20131221123536-584457960.jpg" width = "5% " height="5%" />

> **计算机语言**

按执行效率

	C语言-----运行时直接生成机器码运行----较快
	Java，c#，python，php--- >字节码 >机器码--
	执行时形成字节码---->>再生成机器码，执行速度慢
	
按解释型，编译型

	C,Java,C#---->>>编译型------>>>>>先编译再执行，执行会快一点
	python，php，--->>>解释型--->>>>实时翻译，编译同时翻译


<br><br>

## 2 python的相关知识

----------


**python解释器的种类，python的下载**
>
>我们需要python解释器来运行py代码 Python的解释器很多，但使用最广泛的还是CPython


	1. CPython--从Python官网获得的一个官方版本的解释器：CPython
	2. IPython--基于CPython之上的一个交互式解释器，用户交互方式上有所增强，功能和CPytho是完全一样的。
	   CPython用>>>作为提示符，而IPython用In [序号]:作为提示符
	3. PyPy--另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（不是解释），所以可以显著提高Python代码的执行速		 度。相同的Python代码在两种解释器下执行可能会有不同的结果。
	4. Jython--是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。
	5. IronPython--和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。

 
**常用的python编译器**

>**文本编译器**

	sublime text
	notepad ++
	注意 绝对不能用Word和Windows自带的记事本。
		Word保存的不是纯文本文件，
	    记事本会自作聪明地在文件开始的地方加上几个特殊字符（UTF-8 BOM）

>**IDE -- Integrated Development Environment**
	
	pycharm-- 最好的python IDE


<br><br>


## 3 python编程基础

----------

<br>
## **数据类型**##
<br>

计算机是可以做数学计算的机器，即可以处理各种数值。不过计算机能处理的不止数值，还有文本、图形、音频、视频、网页等各种各样的数据。

	不同的数据，需要定义不同的数据类型。

在Python中，能够直接处理的常用数据类型有：

<br>

----------
### 一. 数字类型###

<br>
	
>**1 整型 int**

Python可以处理任意大小的整数，当然包括负整数；
计算机由于使用二进制，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，如：0xff00，0xa5b4c3d2，等等。

	进制转换
		 v1 = 11  >>> 转换为二进制   2^2 + 2^1 + 2^0 ----
	              >>> 转换为八进制
	              >>> 转换为十六进制
		  
>**2 浮点数 float**

浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的。

	a='2.4324093943294932434343'
	c=2.4324093943294932434343
	b=float(a)
	print(a,c)
	2.4324093943294932434343 2.4324093943294933
浮点数会丢失准度----所有计算机语言会产生
	
>**3 复数 complex**

实部+虚部

>**数字类型用到的方法**

	11.bit_length()-----用二进制表示最少的位数
	result=1.to_bytes(6,'little')-----数字转换为字节码----little 计算机的小端 大端
	int.from_bytes(result,'little')-----  把字节码转换为数字


<br>

----------
### 二. 布尔类型 Bool###
<br>

>**True,False**

	常见的bool值为空的数据类型:
	
	None  '' {}  () []  0


<br>

----------
### 三. 有序数据类型 -- 字符串str ###

<br>

**1 字符串的常见知识**

字符串是以单引号'或双引号"括起来的任意文本，
python中的字符串 用 " ", ' ', '''多行字符 '''，来表示。


- **转义字符 \\**	

	转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\

- **原生字符串 r**

	用r''表示''内部的字符串默认不转义

- **''' ''' 三引号表示多行字符串**

	''' '''来表示多行字符

<br>

**2  字符串与编码---编码**

计算机只能处理数字，必须先把文本转换为数字才能处理，
0,1信号的 解释规则不一样---得到的信息不一样，

>>美国 ASCII编码  ---一个字节 8位
>
	由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，
	也就是大小写英文字母、数字和一些符号
>
>>中国: GB2312编码   

>>全球码： unicode ---之前用16位,现在是32位
  
>
    Unicode把所有语言都统一到一套编码里，解决乱码问题,Unicode标准也在不断发
	展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个
	字节）。现代操作系统和大多数编程语言都直接支持Unicode。

>>可变长编码: UTF-8  ---变长(便于传输)

>
    UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字
	母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字
	节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间

内存中 是统一的 unicode 

硬盘或者传输 的时候是灵活可变长的 UTF-8

<br>

**3  字符串与编码----python中的字符串**

python 中的字符串是以unicode编码的,支持多种语言编码之间的转换

	utf8 中文 -- 3个字节
	gbk 中文 --2个字节

网络或磁盘上读取了字节流 bytes 与 str 之间需要 指定编码格式的转换(utf8 gbk)
bytes的每个字符都只占用一个字节

<br>

**4  字符串常用的方法**

    mystr.casefold()-------所有字符变小写，包括法语
    mystr.lower()-------   ASCII 码 才可以变

	mystr.center(20,'*')  以字符串为中心 两边加* 一共长度为 20
	mystr.ljust(20,'*')  以字符串 左对齐  加* 一共长度为 20
	mystr.rjght(20,'*')  以字符串 右对齐  加* 一共长度为 20

	mystr.count('*')       计数  * 个数

	mystr.encode('utf-8')      字符转化

	mystr.expandtabs(20)  a\t =====>> 一共占20个  对齐格式时使用
                          \n --->> 换行
                          \t --->> 制表符
	
	mystr.index('a')   ----->>>   未找到会报错
	mystr.find('a')   ----- >>>  找到返回第一个索引位置
                         		  未找到返回 -1   ！！

	mystr.idecimal()  ---->>    纯数字  123
	mystr.isdigit()  ---->>     数字字符  123  (1)  ！！
	mystr.isnumeric()  ---->>     字符和数字  二十  (1)

	mystr.isalnum()  ---->>     字符和数字

	mystr.isidentifier()  ---->>  判断 python内的标识符 关键字

	mystr.isupper()  ---->>     是否所有大写
	mystr.islower()  ---->>     是否所有小写
	
	mystr.isprintable()  ---->>     是否都是可以打印的字符(如果存在\t-->> fasle)
	
	mystr.isspace()  ---->>        是否全是空格

	mystr.istitle()  ---->>        是否标题格式
	mystr.title()  ---->>        每个单词首字母大写

	mystr.rpartation('+')  ---->>    右   分割 保留 "+"
	mystr.partition('+')  ---->>     分割 保留 "+"

	mystr.rsplit('*',1)  ---->>    右 分割
								ajsdsdasadsa.jpg---rsplit('.')

	mystr.splitlines()  ---->>   按换行符分割
	
	mystr.swapcse('aLex')  ---->>  大小写互换	
	
	mystr.zfill(20)  ---->> 填充0 --- 20个

	bytes(mystr,encoding='gbk')----->> 变成字节码表示


	 t= mystr.maketrans('asavf','12345')      # 翻译模板
                                               建立列表  对应关系

	 asdsadqwewqewqe'.translate(t)               #翻译


<br>

**5  字符串的格式化**

>**占位符 %**

占位符只有格式化的时候才有意义

    占位符	替换内容
    %d	整数
    %f	浮点数
    %s	字符串
    %x	十六进制整数
> **  易错点  **
> 
>  tpl="我是%s,年龄%d,学习进度100%"
> 
> tpl="我是%s,年龄%d,学习进度100%" % ('abby',18) ---->>>错误
> tpl="我是%s,年龄%d,学习进度100%%" % ('abby',18) ---->>>正确

<br>

>**format()**


用传入的参数依次替换字符串内的占位符{0}、{1}……，

     name='我叫{0},年龄{1}'          按位置格式化
     al=name.format('apple',45)
     print(al)
<br>

     name='我叫{0},年龄{1},{0}{0}'
	 al=name.format(*['海角',34])           *列表位置传参
     print(al) 
<br>

     name='我叫{name},年龄{age},{name}{name}'
     al=name.format(name='apple',age=18)     对应 赋值 
     print(al)
<br>

      name='我叫{name},年龄{age},{name}{name}'
      dic={'name':'apple','age':18}
      al=name.format(**dic)           **dic 字典 对应 关键字传参
      print(al)

<br>

----------
### 四. 有序数据类型 -- 列表 list ###

<br>

**1  列表的常见知识**

>基本概念

Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。python中常用的容器数据类型。

<br>

>常见操作

可循环迭代，索引取值

<br>

>深浅拷贝 

实质是地址指向不同

浅拷贝 只是拷贝最外层的数据; 深拷贝 拷贝所有数据

    # import copy
    # li=[11,[22,88],33]
    # li2=copy.deepcopy(li)  # li2 拷贝所有层的数据 （所有层的指向）
    # li3=li.copy()          # li 和 li3都是指向 同一个地址(第一层地址)
    # li[1].append(44)
    # print(li,li2,li3)

<br>

**2  列表的常用方法**

	mylist.count()---计数-

	mylist.extend(可迭代对象)---添加元素
	
	mylist.index('',5)---查找元素索引---丛下标为5开始

	mylist.insert('',7)---插入

	mylist.pop(3)---删除 取出 一个元素 ---- 默认最后一个

	mylist.remove(item)---删除   --有重复的 删除第一个

	mylist.sort(reverse=True)--- 排序 

	mylist.append('word')------在尾部追加变量

	mylist.reverse()----------反转


<br>

----------

### 五. 有序数据类型 -- 元组 tuple ###

<br>

**1  元组的常见知识**

tuple和list非常类似，但是tuple一旦初始化就不能修改
 
没有append()，insert()这样的方法,可以索引，循环遍历

<br>

> 注意：
 
-  元组不可以修改 不可变数据类型(最外层)
- (1,) 需要加逗号
- 1,2,3 也是元组的写法
- 里面有嵌套的可以变化([1,2,3],['qwq','sad']) 

<br>

**2  元组的常用方法**

	my_tuple.index('')----索引
	my_tuple.count('')---计数

<br>

----------

### 六. 无序数据类型 -- 字典 dict ###

<br>

**1  字典的常见知识**

<br>
>基本概念

Python内置了字典，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。 

<br>

>无序和无重复元素

<br>

>字典与列表


dict 按键 hash计算 查找

 - 查找和插入的速度极快，不会随着key的增加而变慢；
-  需要占用大量的内存，内存浪费多。

list 循环查找

- 查找和插入的时间随着元素的增加而增加；
- 占用空间小，浪费内存很少。

<br>

> 哈希算法（Hash）---- 保证字典快速查询的关键

dict根据key来计算value的存储位置，需要不可变的数据类型作为键,保证hash的正确性.

	字符串、整数，元组 ====>> 哈希类型    因此，可以作为字典的key
	list dic set   =====>>  非哈希类型

<br>

**2  字典的常用方法**
	
	mydict.get()  -取值，没有的时候返回 None
	
	mydict.clear() -清空

	mydict.copy()  -拷贝
	
	mydict.values()
	mydict.keys()
	mydict.items()  

	mydict.pop('k1'，None)  -删除 返回
		# dic={1:2}
		# a=dic.pop(3,'没有这个键')     # 件不存在时 pop('k1','没有这个键')
		# print(a)

	mydict.popitem()  -随机删除item  返回

	mydict.setdefault()  -添加 增加 不会修改

	mydict.update()  -更新  取最新的值
	
	创建字典   dict.fromkeys()---------------通过类拿出来的功能

		
			val=dict.fromkeys(['k1','k2','k3'],[])
			print(val)
			{'k1': [], 'k2': [], 'k3': []}
			val["k1"].append(678)  # 三个都指向一个 [] 地址 都会添加 678
			val["k1"]=[1,2,3]     # k1 重新 赋值
			val["k1"].append(678)
			print(val)
			{'k1': [1, 2, 3, 678], 'k2': [678], 'k3': [678]}




<br>

----------

### 七. 无序数据类型 -- 集合 set ###

<br>

**1  集合的常见知识**

> 无序和无重复元素的集合

同样是无重复数据类型，set和dict的唯一区别仅在于没有存储对应的value

> 常用来去重，两个set之间进行数学意义上的交集、并集等操作。

<br>
>里面的元素 同 字典的键一样 只能是 不可变的hash数据类型。


**2  集合的常用方法**

	myset.add() 添加

	myset.copy() 浅拷贝

	myset.discard('啊')  删除‘啊’--不报错  ！！
	myset.remove('啊')  删除‘啊’----不存在会报错

	myset.update({7})  更新{7}
	
	myset.pop()  随机删除

	issuperset() 判断是父集
	issubset() 判断是子集-
	isdisjoint() 判断是够无交集

	myset.union(set0)                       并集
	myset.intersection(set0)  		交集
	set1.difference(set2)   set1-set2  	差集





