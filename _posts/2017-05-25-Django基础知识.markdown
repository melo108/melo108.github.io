---
layout: post
title:  "Django基础知识"
description: MTV，http协议,web框架
date:   2017-05-25 12:55:42 +0200
categories: jekyll update
---



# Django框架基础知识
------


<br>

## 1 开发语言的MVC与Django的MVC

> **MVC**

大部分的开发语言都有 MVC 框架，其核心是降低各个模块的耦合性，更容易重构代码，最大程度上实现代码的重用，低耦合，高内聚。


- M 表示 model， 主要用于对数据库层的封装

- V 表示 view，用于向用户展示结果

- C 表示 control， **核心**，将显示与数据的内容进行分离，处理请求


<img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1516616545781&di=362a09736cea7d63b9e8e2f70fd0bba6&imgtype=0&src=http%3A%2F%2Fimages.cnitblog.com%2Fblog%2F191097%2F201307%2F17122850-e60fd55ef7ed48679f6785aa3ff80082.png">




> **Django的MTV模型**


Django是 python的web 开发框架，借鉴 MVC模型

- M 表示 model， 负责与数据库进行交互 --- **ORM**
- V 表示 view，**核心**， 负责数据请求，获取数据，返回结果
- T 表示 template, 负责显示内容 到浏览器



<br>

## 2 http协议

<br>


**1 HTTP简介**

HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。

HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。

HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。

HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。

<br>

**2 HTTP特点**

> **1、简单快速：**

客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。

由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。

> **2、灵活：**

HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。

> **3.无连接：**

无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。

> **4.无状态：**

HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。

缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。


<br>

**3 HTTP请求协议**

请求协议遵照以下格式：

	请求首行；        // 请求方式 请求路径 协议和版本，例如：GET /index.html HTTP/1.1
	请求头信息；      // 请求头名称:请求头内容，即为key:value格式，例如：Host:localhost
	空行；           // 用来与请求体分隔开
	请求体。         // GET没有请求体，只有POST有请求体。

浏览器发送给服务器的内容就这个格式的，如果不是这个格式服务器将无法解读！在HTTP协议中，请求有很多请求方法，其中最为常用的就是GET和POST。





- **get请求**


		GET /562f25980001b1b106000338.jpg HTTP/1.1
		Host    img.mukewang.com
		User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36
		Accept    image/webp,image/*,*/*;q=0.8
		Referer    http://www.imooc.com/
		Accept-Encoding    gzip, deflate, sdch
		Accept-Language    zh-CN,zh;q=0.8


> **HTTP默认的请求方法就是GET**

     * 没有请求体
     * 数据量有限制！
     * GET请求数据会暴露在浏览器的地址栏中


> **GET请求常用的操作：**

       1. 在浏览器的地址栏中直接给出URL，那么就一定是GET请求
       2. 点击页面上的超链接也一定是GET请求
       3. 提交表单时，表单默认使用GET请求，但可以设置为POST


> **请求头：**

	
	1、Host
	
	请求的web服务器域名地址
	
	2、User-Agent
	
	HTTP客户端运行的浏览器类型的详细信息。通过该头部信息，web服务器可以判断出http请求的客户端的浏览器的类型。
	
	3、Accept
	
	指定客户端能够接收的内容类型，内容类型的先后次序表示客户都接收的先后次序
	
	4、Accept-Lanuage
	
	指定HTTP客户端浏览器用来展示返回信息优先选择的语言
	
	5、Accept-Encoding
	
	指定客户端浏览器可以支持的web服务器返回内容压缩编码类型。表示允许服务器在将输出内容发送到客户端以前进行压缩，以节约带宽。
	而这里设置的就是客户端浏览器所能够支持的返回压缩格式。
	
	6、Accept-Charset
	
	HTTP客户端浏览器可以接受的字符编码集
	
	7、Content-Type
	
	显示此HTTP请求提交的内容类型。一般只有post提交时才需要设置该属性
	
	有关Content-Type属性值有如下两种编码类型：
	
	（1）“application/x-www-form-urlencoded”： 表单数据向服务器提交时所采用的编码类型，默认的缺省值就是“application/x-www-form-urlencoded”。
	     然而，在向服务器发送大量的文本、包含非ASCII字符的文本或二进制数据时这种编码方式效率很低。
	
	（2）“multipart/form-data”： 在文件上载时，所使用的编码类型应当是“multipart/form-data”，它既可以发送文本数据，也支持二进制数据上载。
	
	当提交为表单数据时，可以使用“application/x-www-form-urlencoded”；当提交的是文件时，就需要使用“multipart/form-data”编码类型。

- **post请求**

		
		POST / HTTP1.1
		Host:www.wrox.com
		User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)
		Content-Type:application/x-www-form-urlencoded
		Content-Length:40
		Connection: Keep-Alive
		
		name=Professional%20Ajax&publisher=Wiley




<br>

**4 HTTP响应协议**

<br>


>  **1 响应格式**


一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。

HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文


第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。

第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）

第二部分：消息报头，用来说明客户端要使用的一些附加信息

第二行和第三行为消息报头，
Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8

第三部分：空行，消息报头后面的空行是必须的

第四部分：响应正文，服务器返回给客户端的文本信息。



> **2 响应状态码**


状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:

	1xx：指示信息--表示请求已接收，继续处理
	2xx：成功--表示请求已被成功接收、理解、接受
	3xx：重定向--要完成请求必须进行更进一步的操作
	4xx：客户端错误--请求有语法错误或请求无法实现
	5xx：服务器端错误--服务器未能实现合法的请求

常见状态码：

	200 OK                        //客户端请求成功
	400 Bad Request               //客户端请求有语法错误，不能被服务器所理解
	401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 
	403 Forbidden                 //服务器收到请求，但是拒绝提供服务
	404 Not Found                 //请求资源不存在，eg：输入了错误的URL
	500 Internal Server Error     //服务器发生不可预期的错误
	503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常



<br>


**5 GET和POST请求的区别**



> **GET请求**

	GET /books/?sex=man&name=Professional HTTP/1.1
	Host: www.wrox.com
	User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
	Gecko/20050225 Firefox/1.0.1
	Connection: Keep-Alive

注意最后一行是空行


> **POST请求**

	POST / HTTP/1.1
	Host: www.wrox.com
	User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)
	Gecko/20050225 Firefox/1.0.1
	Content-Type: application/x-www-form-urlencoded
	Content-Length: 40
	Connection: Keep-Alive
	
	name=Professional%20Ajax&publisher=Wiley



> **请求的数据**

	GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&连接；例 如：login.action?name=hyddd&password=idontknow&verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。
	
	POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据

因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变。


> **传输数据的大小：**

	首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。
	
	而在实际开发中存在的限制主要有：
	
	GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。
	
	因此对于GET提交时，传输数据就会受到URL长度的 限制。
	
	POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。
	

> **GET和POST的区别**

	GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&相连，如EditPosts.aspx?name=test1&id=123456. POST方法是把提交的数据放在HTTP包的Body中.
	
	GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.
	
	GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。
	
	GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.


<br>

## 3 web 框架

<br>

对于所有的Web应用，本质上其实就是一个socket服务端，用户的浏览器其实就是一个socket客户端。

最简单的Web应用就是**先把HTML用文件保存好**，**用一个现成的HTTP服务器软件，接收用户请求**，**从文件中读取HTML**，返回。

如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。

正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，**需要一个统一的接口，让我们专心用Python编写Web业务**。

**这个接口就是WSGI：Web Server Gateway Interface**。

<br>

> **wsgiref模块**
	
	from wsgiref.simple_server import make_server
	
	
	def application(environ, start_response):
	    start_response('200 OK', [('Content-Type', 'text/html')])
	    return [b'<h1>Hello, web!</h1>']
	
	
	httpd = make_server('', 8080, application)
	
	print('Serving HTTP on port 8000...')
	# 开始监听HTTP请求:
	httpd.serve_forever()



> **DIY一个自己的web框架**



**manage.py**

	from wsgiref.simple_server import make_server
	
	#  request            response
	
	
	from app01.views import *
	
	from app01 import urls
	
	
	def routers():
	
	    URLpattern=urls.URLpattern
	
	    return URLpattern
	
	
	def applications(environ,start_response):
	
	    path=environ.get("PATH_INFO")
	    print("path",path)
	    start_response('200 OK', [('Content-Type', 'text/html'),('Charset', 'utf8')])
	
	    urlpattern=routers()
	    func=None
	
	    for item in urlpattern:
	        if path==item[0]:
	            func=item[1]
	            break
	
	    if func:
	        return [func(environ)]
	    else:
	        return [b"<h1>404!<h1>"]
	
	
	    # return [b"<h1>hello world<h1>"]
	
	
	if __name__ == '__main__':
	
	    t=make_server("",8810,applications)
	    print("server is working...")
	    t.serve_forever()


**urls**

	from app01.views import *
	
	
	URLpattern = (
	    ("/login/", login),
	)



**views**
	
	
	import pymysql
	
	from urllib.parse import parse_qs
	
	
	def login(request):
	
	    if request.get("REQUEST_METHOD")=="POST":
	        print("+++++",request)
	
	
	        #当请求方式是GET时
	        # user_union,pwd_union=request.get("QUERY_STRING").split("&")
	        # _,user=user_union.split("=")
	        # _,pwd=pwd_union.split("=")
	
	        # 环境变量 CONTENT_LENGTH 可能是空值 或者 值丢失
	        try:
	            request_body_size = int(request.get('CONTENT_LENGTH', 0))
	        except (ValueError):
	            request_body_size = 0
	        # 当请求方式是POST时, 变量将会被放在存在域wsgi.input文件中的HTTP请求信息中, 由WSGI 服务器一起发送.
	        request_body = request['wsgi.input'].read(request_body_size)
	        d = parse_qs(request_body)
	
	
	        user=d.get(b"user")[0].decode("utf8")
	        pwd=d.get(b"pwd")[0].decode("utf8")
	
	        print("user",user,pwd)
	
	
	        #连接数据库
	        conn = pymysql.connect(host='',port= 3306,user = 'root',passwd='',db='s6') #db：库名
	        #创建游标
	        cur = conn.cursor()
	
	        SQL="select * from userinfo2 WHERE NAME ='%s' AND PASSWORD ='%s'"%(user,pwd)
	
	        cur.execute(SQL)
	
	        if cur.fetchone():
	
	            f=open("templates/backend.html","rb")
	
	            data=f.read()
	            data=(data.decode("utf8"))%user
	            return data.encode("utf8")
	
	        else:
	             return b"user or pwd is wrong"
	
	
	    else:
	        f = open("templates/login.html", "rb")
	
	        data = f.read()
	        f.close()
	
	        return data

**models**

	
	import pymysql
	
	
	import pymysql
	#连接数据库
	conn = pymysql.connect(host='',port= 3306,user = 'root',passwd='',db='s6') #db：库名
	#创建游标
	cur = conn.cursor()
	
	# sql='''
	# create table userinfo2(
	#         id INT PRIMARY KEY ,
	#         name VARCHAR(32) ,
	#         password VARCHAR(32)
	# )
	#
	# '''
	#
	# cur.execute(sql)
	#
	# cur.executemany("insert into userinfo2 values(%s,%s,%s)", [(1,"yuan","123"),
	#                                                           (2,"alex","456"),
	#                                                           (3,"egon","789")])
	
	
	cur.execute("select * from userinfo2 WHERE NAME='yuan' AND PASSWORD ='123'")
	#提交
	conn.commit()
	#关闭指针对象
	cur.close()
	#关闭连接对象
	conn.close()



<br>

## 4 Django项目创建与基本配置


<br>


**（1） 基本命令**

<br>

> **1、下载Django：**

	pip3 install django


> **2、创建一个django project**


	django-admin.py startproject mysite

当前目录下会生成mysite的工程，目录结构如下：

	mysite
		manage.py
		mysite
			__init__.py
			settings.py
			urls.py
			wsgi.py
        

manage.py ----- Django项目里面的工具，通过它可以调用django shell和数据库等。

settings.py ---- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。

urls.py ----- 负责把URL模式映射到应用程序。



> **3、在mysite目录下创建应用**


	python manage.py startapp blog


目录结构如下：
	
	blog
		__init__.py
		admin.py
		apps.py
		migrations.py
			__init__.py
		models.py
		tests.py
		views.py
	        


> **4、启动django项目**


	python manage.py runserver 8080

这样我们的django就启动起来了！当我们访问：http://127.0.0.1:8080/时就可以看到：

       


> **5、同步更改数据库表或字段**


    python manage.py syncdb
     
    注意：Django 1.7.1 及以上的版本需要用以下命令
    python manage.py makemigrations
    python manage.py migrate
    

这种方法可以创建表，当你在models.py中新增了类时，运行它就可以自动在数据库中创建表了，不用手动创建。


> **6、清空数据库**


	python manage.py flush

 此命令会询问是 yes 还是 no, 选择 yes 会把数据全部清空掉，只留下空表。


> **7、创建超级管理员**


    python manage.py createsuperuser
     
    # 按照提示输入用户名和对应的密码就好了邮箱可以留空，用户名和密码必填
     

> **8、修改 用户密码可以用：**

    python manage.py changepassword username
    


> **9、Django 项目环境终端**


	python manage.py shell

这个命令和 直接运行 python 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据的测试非常方便。


> **10、Django 项目数据库终端**

	python manage.py dbshell

Django 会自动进入在settings.py中设置的数据库，如果是 MySQL 或 postgreSQL,会要求输入数据库用户密码。

在这个终端可以执行数据库的SQL语句。如果您对SQL比较熟悉，可能喜欢这种方式。



> **更多命令**

	python manage.py

 查看所有的命令，忘记子名称的时候特别有用。

<br>

**(2) 静态文件的配置**

**静态文件的处理又包括STATIC和MEDIA两类，这往往容易混淆,**
        
**MEDIA:指用户上传的文件，比如在Model里面的FileFIeld，ImageField上传的文件**。


静态文件交由Web服务器处理，Django本身不处理静态文件。简单的处理逻辑如下(以nginx为例)：

      URI请求-----> 按照Web服务器里面的配置规则先处理，以nginx为例，主要求配置在nginx.
                     conf里的location

                 |---------->如果是静态文件，则由nginx直接处理

                 |---------->如果不是则交由Django处理，Django根据urls.py里面的规则进行匹配

    以上是部署到Web服务器后的处理方式，为了便于开发，Django提供了在开发环境的对静态文件的处理机制，方法是这样：

> **static配置：**

STATIC主要指的是如css,js,images这样文件：
	
	STATIC_URL = '/static/'      # 别名
	STATICFILES_DIRS = (
	            os.path.join(BASE_DIR,"static"),  #实际名 ,即实际文件夹的名字
	        )



注意点1:

	django对引用名和实际名进行映射,引用时,只能按照引用名来,不能按实际名去找
	
	<script src="/statics/jquery-3.1.1.js"></script>
	------error－－－－－不能直接用，必须用STATIC_URL = '/static/':
	<script src="/static/jquery-3.1.1.js"></script>

注意点2:

	 STATICFILES_DIRS = (
	    (os.path.join(BASE_DIR, "app01/statics"),) 元组记得加逗号,或者直接写成列表也可
 

直接访问

	http://127.0.0.1:8000/static/jquery.js



> **media配置：**


	# in settings:
	
	MEDIA_URL="/media/"
	MEDIA_ROOT=os.path.join(BASE_DIR,"app01","media","upload")
	
	# in urls:
	from django.views.static import serve
	url(r'^media/(?P<path>.*)$', serve, {'document_root': settings.MEDIA_ROOT}),
